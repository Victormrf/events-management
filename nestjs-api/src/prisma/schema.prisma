generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Representa os usuários
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events    Event[]
  orders    Order[]
}

// Representa os eventos
model Event {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  date        DateTime
  maxAttendees Int?
  price       Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String

  address Address @relation(fields: [addressId], references: [id])
  addressId String @unique // Chave estrangeira para o endereço

  orders Order[]
}

// Representa o endereço de um evento
model Address {
  id           String   @id @default(uuid())
  street       String
  neighborhood String?
  city         String
  state        String
  country      String
  zipCode      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  event Event?
}

// Representa a transação de aquisição de ingressos
model Order {
  id          String   @id @default(uuid())
  totalAmount Float
  quantity    Int
  status      OrderStatus @default(CONFIRMED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  event Event @relation(fields: [eventId], references: [id])
  eventId String

  attendees Attendee[]
}

// Representa cada participante individual inscrito em um evento
model Attendee {
  id         String   @id @default(uuid())
  name       String
  email      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  @@unique([orderId, id]) // O ID do participante é único para cada ordem
}

// Enums para tipos de dados com valores fixos
enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
